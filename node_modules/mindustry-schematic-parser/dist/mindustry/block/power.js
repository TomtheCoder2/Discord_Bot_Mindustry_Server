"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImpactReactor = exports.ThoriumReactor = exports.SolarPanelLarge = exports.SolarPanel = exports.RtgGenerator = exports.DifferentialGenerator = exports.SteamGenerator = exports.ThermalGenerator = exports.CombustionGenerator = exports.PowerGenerator = exports.BatteryLarge = exports.Battery = exports.Diode = exports.SurgeTower = exports.PowerNodeLarge = exports.PowerNode = void 0;
var tslib_1 = require("tslib");
var block_1 = require("./block");
var util_1 = require("../../util");
var category = 'power';
var PowerBlock = /** @class */ (function (_super) {
    tslib_1.__extends(PowerBlock, _super);
    function PowerBlock() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PowerBlock.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({ tile: tile, canvas: canvas, category: category, layers: [this.name] })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return PowerBlock;
}(block_1.Block));
var PowerNode = /** @class */ (function (_super) {
    tslib_1.__extends(PowerNode, _super);
    function PowerNode() {
        return _super.call(this, {
            name: 'power-node',
            requirements: {
                copper: 1,
                lead: 3,
            },
            size: 1,
        }) || this;
    }
    return PowerNode;
}(PowerBlock));
exports.PowerNode = PowerNode;
var PowerNodeLarge = /** @class */ (function (_super) {
    tslib_1.__extends(PowerNodeLarge, _super);
    function PowerNodeLarge() {
        return _super.call(this, {
            name: 'power-node-large',
            requirements: {
                titanium: 5,
                lead: 10,
                silicon: 3,
            },
            size: 2,
        }) || this;
    }
    return PowerNodeLarge;
}(PowerBlock));
exports.PowerNodeLarge = PowerNodeLarge;
var SurgeTower = /** @class */ (function (_super) {
    tslib_1.__extends(SurgeTower, _super);
    function SurgeTower() {
        return _super.call(this, {
            name: 'surge-tower',
            requirements: {
                titanium: 7,
                lead: 10,
                silicon: 15,
                'surge-alloy': 15,
            },
            size: 2,
        }) || this;
    }
    return SurgeTower;
}(PowerBlock));
exports.SurgeTower = SurgeTower;
var Diode = /** @class */ (function (_super) {
    tslib_1.__extends(Diode, _super);
    function Diode() {
        return _super.call(this, {
            name: 'diode',
            requirements: {
                silicon: 10,
                plastanium: 5,
                metaglass: 10,
            },
            size: 1,
        }) || this;
    }
    Diode.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var degrees, rotation, context, _a, x, y, arrow, offset;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, _super.prototype.draw.call(this, tile, canvas)];
                    case 1:
                        _b.sent();
                        degrees = [0, -90, 180, 90];
                        rotation = tile.rotation % 4;
                        // avoid re rendering the arrow, because in this case its in the
                        // correct rotation
                        if (rotation === 2)
                            return [2 /*return*/];
                        context = canvas.getContext('2d');
                        _a = util_1.translatePos(tile, canvas), x = _a.x, y = _a.y;
                        return [4 /*yield*/, util_1.blockAsset(category, this.name + '-arrow')];
                    case 2:
                        arrow = _b.sent();
                        offset = this.size * 16;
                        context.save();
                        context.translate(x + offset, y + offset);
                        context.rotate((degrees[rotation] * Math.PI) / 180);
                        context.translate(-offset, -offset);
                        context.drawImage(arrow, 0, 0);
                        context.restore();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Diode;
}(PowerBlock));
exports.Diode = Diode;
var Battery = /** @class */ (function (_super) {
    tslib_1.__extends(Battery, _super);
    function Battery() {
        return _super.call(this, {
            name: 'battery',
            requirements: {
                copper: 5,
                lead: 20,
            },
            size: 1,
        }) || this;
    }
    return Battery;
}(PowerBlock));
exports.Battery = Battery;
var BatteryLarge = /** @class */ (function (_super) {
    tslib_1.__extends(BatteryLarge, _super);
    function BatteryLarge() {
        return _super.call(this, {
            name: 'battery-large',
            requirements: {
                titanium: 20,
                lead: 40,
                silicon: 20,
            },
            size: 3,
        }) || this;
    }
    return BatteryLarge;
}(PowerBlock));
exports.BatteryLarge = BatteryLarge;
var PowerGenerator = /** @class */ (function (_super) {
    tslib_1.__extends(PowerGenerator, _super);
    function PowerGenerator(properties) {
        var _this = _super.call(this, properties) || this;
        /// gets the actual amount consumed per second
        _this.powerGeneration *= 60;
        return _this;
    }
    return PowerGenerator;
}(PowerBlock));
exports.PowerGenerator = PowerGenerator;
var CombustionGenerator = /** @class */ (function (_super) {
    tslib_1.__extends(CombustionGenerator, _super);
    function CombustionGenerator() {
        return _super.call(this, {
            name: 'combustion-generator',
            requirements: {
                copper: 25,
                lead: 15,
            },
            size: 1,
            powerGeneration: 1,
        }) || this;
    }
    return CombustionGenerator;
}(PowerGenerator));
exports.CombustionGenerator = CombustionGenerator;
var ThermalGenerator = /** @class */ (function (_super) {
    tslib_1.__extends(ThermalGenerator, _super);
    function ThermalGenerator() {
        return _super.call(this, {
            name: 'thermal-generator',
            requirements: {
                copper: 40,
                graphite: 35,
                lead: 50,
                silicon: 35,
                metaglass: 40,
            },
            size: 2,
            powerGeneration: 1.8,
        }) || this;
    }
    return ThermalGenerator;
}(PowerGenerator));
exports.ThermalGenerator = ThermalGenerator;
var SteamGenerator = /** @class */ (function (_super) {
    tslib_1.__extends(SteamGenerator, _super);
    function SteamGenerator() {
        return _super.call(this, {
            name: 'steam-generator',
            requirements: {
                copper: 35,
                graphite: 25,
                lead: 40,
                silicon: 30,
            },
            size: 2,
            powerGeneration: 5.5,
        }) || this;
    }
    SteamGenerator.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            tile: tile,
                            canvas: canvas,
                            category: category,
                            layers: [
                                this.name,
                                this.name + '-turbine0',
                                this.name + '-turbine1',
                                this.name + '-cap',
                            ],
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return SteamGenerator;
}(PowerGenerator));
exports.SteamGenerator = SteamGenerator;
var DifferentialGenerator = /** @class */ (function (_super) {
    tslib_1.__extends(DifferentialGenerator, _super);
    function DifferentialGenerator() {
        return _super.call(this, {
            name: 'differential-generator',
            requirements: {
                copper: 70,
                titanium: 50,
                lead: 100,
                silicon: 65,
                metaglass: 50,
            },
            size: 3,
            powerGeneration: 18,
        }) || this;
    }
    return DifferentialGenerator;
}(PowerGenerator));
exports.DifferentialGenerator = DifferentialGenerator;
var RtgGenerator = /** @class */ (function (_super) {
    tslib_1.__extends(RtgGenerator, _super);
    function RtgGenerator() {
        return _super.call(this, {
            name: 'rtg-generator',
            requirements: {
                lead: 100,
                silicon: 75,
                'phase-fabric': 25,
                plastanium: 75,
                thorium: 50,
            },
            size: 2,
            powerGeneration: 4.5,
        }) || this;
    }
    return RtgGenerator;
}(PowerGenerator));
exports.RtgGenerator = RtgGenerator;
var SolarPanel = /** @class */ (function (_super) {
    tslib_1.__extends(SolarPanel, _super);
    function SolarPanel() {
        return _super.call(this, {
            name: 'solar-panel',
            requirements: {
                lead: 10,
                silicon: 15,
            },
            size: 1,
            powerGeneration: 0.1,
        }) || this;
    }
    return SolarPanel;
}(PowerGenerator));
exports.SolarPanel = SolarPanel;
var SolarPanelLarge = /** @class */ (function (_super) {
    tslib_1.__extends(SolarPanelLarge, _super);
    function SolarPanelLarge() {
        return _super.call(this, {
            name: 'solar-panel-large',
            requirements: {
                lead: 80,
                silicon: 110,
                'phase-fabric': 15,
            },
            size: 3,
            powerGeneration: 1.3,
        }) || this;
    }
    return SolarPanelLarge;
}(PowerGenerator));
exports.SolarPanelLarge = SolarPanelLarge;
var ThoriumReactor = /** @class */ (function (_super) {
    tslib_1.__extends(ThoriumReactor, _super);
    function ThoriumReactor() {
        return _super.call(this, {
            name: 'thorium-reactor',
            requirements: {
                lead: 300,
                silicon: 200,
                graphite: 150,
                thorium: 150,
                metaglass: 50,
            },
            size: 3,
            powerGeneration: 15,
        }) || this;
    }
    return ThoriumReactor;
}(PowerGenerator));
exports.ThoriumReactor = ThoriumReactor;
var ImpactReactor = /** @class */ (function (_super) {
    tslib_1.__extends(ImpactReactor, _super);
    function ImpactReactor() {
        return _super.call(this, {
            name: 'impact-reactor',
            requirements: {
                lead: 500,
                silicon: 300,
                graphite: 400,
                thorium: 100,
                'surge-alloy': 250,
                metaglass: 250,
            },
            size: 4,
            powerGeneration: 130,
            powerConsumption: 25,
        }) || this;
    }
    ImpactReactor.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            canvas: canvas,
                            category: category,
                            tile: tile,
                            layers: [this.name + '-bottom', this.name],
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return ImpactReactor;
}(PowerGenerator));
exports.ImpactReactor = ImpactReactor;
//# sourceMappingURL=power.js.map