"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Meltdown = exports.Spectre = exports.Foreshadow = exports.Cyclone = exports.Ripple = exports.Fuse = exports.Tsunami = exports.Segment = exports.Salvo = exports.Swarmer = exports.Parallax = exports.Arc = exports.Lancer = exports.Wave = exports.Hail = exports.Scorch = exports.Scatter = exports.Duo = void 0;
var tslib_1 = require("tslib");
var canvas_1 = require("canvas");
var block_1 = require("./block");
var util_1 = require("../../util");
var category = 'turrets';
var Turret = /** @class */ (function (_super) {
    tslib_1.__extends(Turret, _super);
    function Turret() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Turret.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tcanvas, context, image, dArr, s, x, y, i;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            tile: tile,
                            canvas: canvas,
                            category: category,
                            layers: ['bases/block-' + this.size],
                        })];
                    case 1:
                        _a.sent();
                        tcanvas = canvas_1.createCanvas(this.size * 32, this.size * 32);
                        context = tcanvas.getContext('2d');
                        return [4 /*yield*/, util_1.blockAsset(category, this.name)];
                    case 2:
                        image = _a.sent();
                        dArr = [-1, -1, 0, -1, 1, -1, -1, 0, 1, 0, -1, 1, 0, 1, 1, 1], s = 3, x = 0, y = 0;
                        i = 0;
                        // draw images at offsets from the array scaled by s
                        for (; i < dArr.length; i += 2)
                            context.drawImage(image, x + dArr[i] * s, y + dArr[i + 1] * s);
                        // fill with color
                        context.globalCompositeOperation = 'source-in';
                        context.fillStyle = '#353535';
                        context.fillRect(0, 0, canvas.width, canvas.height);
                        // draw original image in normal mode
                        context.globalCompositeOperation = 'source-over';
                        context.drawImage(image, x, y);
                        this.renderImage({
                            canvas: canvas,
                            image: tcanvas,
                            tile: tile,
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return Turret;
}(block_1.Block));
var Duo = /** @class */ (function (_super) {
    tslib_1.__extends(Duo, _super);
    function Duo() {
        return _super.call(this, {
            name: 'duo',
            requirements: { copper: 35 },
            size: 1,
        }) || this;
    }
    return Duo;
}(Turret));
exports.Duo = Duo;
var Scatter = /** @class */ (function (_super) {
    tslib_1.__extends(Scatter, _super);
    function Scatter() {
        return _super.call(this, {
            name: 'scatter',
            requirements: { copper: 85, lead: 45 },
            size: 2,
        }) || this;
    }
    return Scatter;
}(Turret));
exports.Scatter = Scatter;
var Scorch = /** @class */ (function (_super) {
    tslib_1.__extends(Scorch, _super);
    function Scorch() {
        return _super.call(this, {
            name: 'scorch',
            requirements: { copper: 25, graphite: 22 },
            size: 1,
        }) || this;
    }
    return Scorch;
}(Turret));
exports.Scorch = Scorch;
var Hail = /** @class */ (function (_super) {
    tslib_1.__extends(Hail, _super);
    function Hail() {
        return _super.call(this, {
            name: 'hail',
            requirements: { copper: 40, graphite: 17 },
            size: 1,
        }) || this;
    }
    return Hail;
}(Turret));
exports.Hail = Hail;
var Wave = /** @class */ (function (_super) {
    tslib_1.__extends(Wave, _super);
    function Wave() {
        return _super.call(this, {
            name: 'wave',
            requirements: { metaglass: 45, lead: 75 },
            size: 2,
        }) || this;
    }
    Wave.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.draw.call(this, tile, canvas)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.render({
                                canvas: canvas,
                                category: category,
                                layers: [this.name + '-top'],
                                tile: tile,
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Wave;
}(Turret));
exports.Wave = Wave;
var Lancer = /** @class */ (function (_super) {
    tslib_1.__extends(Lancer, _super);
    function Lancer() {
        return _super.call(this, {
            name: 'lancer',
            requirements: { copper: 60, lead: 70, silicon: 50 },
            size: 2,
        }) || this;
    }
    return Lancer;
}(Turret));
exports.Lancer = Lancer;
var Arc = /** @class */ (function (_super) {
    tslib_1.__extends(Arc, _super);
    function Arc() {
        return _super.call(this, {
            name: 'arc',
            requirements: { copper: 50, lead: 50 },
            size: 1,
        }) || this;
    }
    return Arc;
}(Turret));
exports.Arc = Arc;
var Parallax = /** @class */ (function (_super) {
    tslib_1.__extends(Parallax, _super);
    function Parallax() {
        return _super.call(this, {
            name: 'parallax',
            requirements: { silicon: 120, titanium: 90, graphite: 30 },
            size: 2,
        }) || this;
    }
    return Parallax;
}(Turret));
exports.Parallax = Parallax;
var Swarmer = /** @class */ (function (_super) {
    tslib_1.__extends(Swarmer, _super);
    function Swarmer() {
        return _super.call(this, {
            name: 'swarmer',
            requirements: { graphite: 35, titanium: 35, plastanium: 45, silicon: 30 },
            size: 2,
        }) || this;
    }
    return Swarmer;
}(Turret));
exports.Swarmer = Swarmer;
var Salvo = /** @class */ (function (_super) {
    tslib_1.__extends(Salvo, _super);
    function Salvo() {
        return _super.call(this, {
            name: 'salvo',
            requirements: { copper: 100, graphite: 90, titanium: 60 },
            size: 2,
        }) || this;
    }
    return Salvo;
}(Turret));
exports.Salvo = Salvo;
var Segment = /** @class */ (function (_super) {
    tslib_1.__extends(Segment, _super);
    function Segment() {
        return _super.call(this, {
            name: 'segment',
            requirements: { silicon: 130, thorium: 80, 'phase-fabric': 40 },
            size: 2,
        }) || this;
    }
    return Segment;
}(Turret));
exports.Segment = Segment;
var Tsunami = /** @class */ (function (_super) {
    tslib_1.__extends(Tsunami, _super);
    function Tsunami() {
        return _super.call(this, {
            name: 'tsunami',
            requirements: { metaglass: 100, lead: 400, titanium: 250, thorium: 100 },
            size: 3,
        }) || this;
    }
    Tsunami.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.draw.call(this, tile, canvas)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.render({
                                canvas: canvas,
                                category: category,
                                layers: [this.name + '-top'],
                                tile: tile,
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Tsunami;
}(Turret));
exports.Tsunami = Tsunami;
var Fuse = /** @class */ (function (_super) {
    tslib_1.__extends(Fuse, _super);
    function Fuse() {
        return _super.call(this, {
            name: 'fuse',
            requirements: { copper: 225, graphite: 225, thorium: 100 },
            size: 3,
        }) || this;
    }
    return Fuse;
}(Turret));
exports.Fuse = Fuse;
var Ripple = /** @class */ (function (_super) {
    tslib_1.__extends(Ripple, _super);
    function Ripple() {
        return _super.call(this, {
            name: 'ripple',
            requirements: { copper: 150, graphite: 135, titanium: 60 },
            size: 3,
        }) || this;
    }
    return Ripple;
}(Turret));
exports.Ripple = Ripple;
var Cyclone = /** @class */ (function (_super) {
    tslib_1.__extends(Cyclone, _super);
    function Cyclone() {
        return _super.call(this, {
            name: 'cyclone',
            requirements: { copper: 200, titanium: 125, plastanium: 80 },
            size: 3,
        }) || this;
    }
    return Cyclone;
}(Turret));
exports.Cyclone = Cyclone;
var Foreshadow = /** @class */ (function (_super) {
    tslib_1.__extends(Foreshadow, _super);
    function Foreshadow() {
        return _super.call(this, {
            name: 'foreshadow',
            requirements: {
                copper: 1000,
                metaglass: 600,
                'surge-alloy': 300,
                plastanium: 200,
                silicon: 600,
            },
            size: 4,
        }) || this;
    }
    return Foreshadow;
}(Turret));
exports.Foreshadow = Foreshadow;
var Spectre = /** @class */ (function (_super) {
    tslib_1.__extends(Spectre, _super);
    function Spectre() {
        return _super.call(this, {
            name: 'spectre',
            requirements: {
                copper: 900,
                graphite: 300,
                'surge-alloy': 250,
                plastanium: 175,
                thorium: 250,
            },
            size: 4,
        }) || this;
    }
    return Spectre;
}(Turret));
exports.Spectre = Spectre;
var Meltdown = /** @class */ (function (_super) {
    tslib_1.__extends(Meltdown, _super);
    function Meltdown() {
        return _super.call(this, {
            name: 'meltdown',
            requirements: {
                copper: 1200,
                lead: 350,
                graphite: 300,
                'surge-alloy': 325,
                silicon: 325,
            },
            size: 4,
        }) || this;
    }
    return Meltdown;
}(Turret));
exports.Meltdown = Meltdown;
//# sourceMappingURL=turrets.js.map