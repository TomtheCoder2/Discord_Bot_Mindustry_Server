import { Canvas } from 'canvas';
import { Block } from './block';
import { SchematicTile } from '../../schematic';
declare abstract class TransportBlock extends Block {
    output: {
        item: boolean;
        liquid: boolean;
    };
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export declare class Conveyor extends TransportBlock {
    constructor();
    output: {
        item: boolean;
        liquid: boolean;
    };
    draw(): Promise<void>;
}
export declare class TitaniumConveyor extends Conveyor {
    constructor();
}
export declare class PlastaniumConveyor extends TransportBlock {
    constructor();
    output: {
        item: boolean;
        liquid: boolean;
    };
    draw(): Promise<void>;
}
export declare class ArmoredConveyor extends Conveyor {
    constructor();
}
export declare class Junction extends TransportBlock {
    constructor();
}
export declare class ItemBridge extends TransportBlock {
    constructor();
}
export declare class PhaseConveyor extends ItemBridge {
    constructor();
}
export declare class Sorter extends TransportBlock {
    constructor();
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export declare class InvertedSorter extends Sorter {
    constructor();
}
export declare class Router extends TransportBlock {
    constructor();
}
export declare class Distributor extends TransportBlock {
    constructor();
}
export declare class OverflowGate extends TransportBlock {
    constructor();
}
export declare class UnderflowGate extends TransportBlock {
    constructor();
}
export declare class MassDriver extends TransportBlock {
    constructor();
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export declare class PayloadConveyor extends TransportBlock {
    constructor();
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export declare class PayloadRouter extends TransportBlock {
    constructor();
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export {};
