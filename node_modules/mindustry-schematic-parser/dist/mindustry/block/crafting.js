"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Incinerator = exports.CoalCentrifuge = exports.Pulverizer = exports.SporePress = exports.Disassembler = exports.Separator = exports.Melter = exports.BlastMixer = exports.PyratiteMixer = exports.CryofluidMixer = exports.SurgeSmelter = exports.PhaseWeaver = exports.PlastaniumCompressor = exports.Kiln = exports.SiliconCrucible = exports.SiliconSmelter = exports.MultiPress = exports.GraphitePress = void 0;
var tslib_1 = require("tslib");
var block_1 = require("./block");
var category = 'crafting';
var GenericCrafter = /** @class */ (function (_super) {
    tslib_1.__extends(GenericCrafter, _super);
    function GenericCrafter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.output = { item: true, liquid: false };
        return _this;
    }
    GenericCrafter.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            tile: tile,
                            canvas: canvas,
                            category: category,
                            layers: [this.name],
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return GenericCrafter;
}(block_1.Block));
var GraphitePress = /** @class */ (function (_super) {
    tslib_1.__extends(GraphitePress, _super);
    function GraphitePress() {
        return _super.call(this, {
            name: 'graphite-press',
            requirements: { copper: 75, lead: 30 },
            size: 2,
        }) || this;
    }
    return GraphitePress;
}(GenericCrafter));
exports.GraphitePress = GraphitePress;
var MultiPress = /** @class */ (function (_super) {
    tslib_1.__extends(MultiPress, _super);
    function MultiPress() {
        return _super.call(this, {
            name: 'multi-press',
            requirements: { titanium: 100, silicon: 25, lead: 100, graphite: 50 },
            size: 3,
            powerConsumption: 1.8,
        }) || this;
    }
    return MultiPress;
}(GenericCrafter));
exports.MultiPress = MultiPress;
var SiliconSmelter = /** @class */ (function (_super) {
    tslib_1.__extends(SiliconSmelter, _super);
    function SiliconSmelter() {
        return _super.call(this, {
            name: 'silicon-smelter',
            requirements: { copper: 30, lead: 25 },
            size: 2,
            powerConsumption: 0.5,
        }) || this;
    }
    return SiliconSmelter;
}(GenericCrafter));
exports.SiliconSmelter = SiliconSmelter;
var SiliconCrucible = /** @class */ (function (_super) {
    tslib_1.__extends(SiliconCrucible, _super);
    function SiliconCrucible() {
        return _super.call(this, {
            name: 'silicon-crucible',
            requirements: {
                titanium: 120,
                metaglass: 80,
                plastanium: 35,
                silicon: 60,
            },
            size: 3,
            powerConsumption: 4.0,
        }) || this;
    }
    return SiliconCrucible;
}(GenericCrafter));
exports.SiliconCrucible = SiliconCrucible;
var Kiln = /** @class */ (function (_super) {
    tslib_1.__extends(Kiln, _super);
    function Kiln() {
        return _super.call(this, {
            name: 'kiln',
            requirements: { copper: 60, graphite: 30, lead: 30 },
            size: 2,
            powerConsumption: 0.6,
        }) || this;
    }
    return Kiln;
}(GenericCrafter));
exports.Kiln = Kiln;
var PlastaniumCompressor = /** @class */ (function (_super) {
    tslib_1.__extends(PlastaniumCompressor, _super);
    function PlastaniumCompressor() {
        return _super.call(this, {
            name: 'plastanium-compressor',
            requirements: { silicon: 80, lead: 115, graphite: 60, titanium: 80 },
            size: 2,
            powerConsumption: 3.0,
        }) || this;
    }
    return PlastaniumCompressor;
}(GenericCrafter));
exports.PlastaniumCompressor = PlastaniumCompressor;
var PhaseWeaver = /** @class */ (function (_super) {
    tslib_1.__extends(PhaseWeaver, _super);
    function PhaseWeaver() {
        return _super.call(this, {
            name: 'phase-weaver',
            requirements: { silicon: 130, lead: 120, thorium: 75 },
            size: 2,
            powerConsumption: 5.0,
        }) || this;
    }
    PhaseWeaver.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            canvas: canvas,
                            category: category,
                            tile: tile,
                            layers: [this.name + '-bottom', this.name, this.name + '-weave'],
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return PhaseWeaver;
}(GenericCrafter));
exports.PhaseWeaver = PhaseWeaver;
var SurgeSmelter = /** @class */ (function (_super) {
    tslib_1.__extends(SurgeSmelter, _super);
    function SurgeSmelter() {
        return _super.call(this, {
            name: 'alloy-smelter',
            requirements: { silicon: 80, lead: 80, thorium: 70 },
            size: 3,
            powerConsumption: 4.0,
        }) || this;
    }
    return SurgeSmelter;
}(GenericCrafter));
exports.SurgeSmelter = SurgeSmelter;
var CryofluidMixer = /** @class */ (function (_super) {
    tslib_1.__extends(CryofluidMixer, _super);
    function CryofluidMixer() {
        var _this = _super.call(this, {
            name: 'cryofluid-mixer',
            requirements: { lead: 65, silicon: 40, titanium: 60 },
            size: 2,
            powerConsumption: 1.0,
            output: { item: false, liquid: true },
        }) || this;
        _this.output = {
            item: false,
            liquid: true,
        };
        return _this;
    }
    CryofluidMixer.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            canvas: canvas,
                            category: category,
                            tile: tile,
                            layers: [this.name, this.name + '-top'],
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return CryofluidMixer;
}(GenericCrafter));
exports.CryofluidMixer = CryofluidMixer;
var PyratiteMixer = /** @class */ (function (_super) {
    tslib_1.__extends(PyratiteMixer, _super);
    function PyratiteMixer() {
        return _super.call(this, {
            name: 'pyratite-mixer',
            requirements: { copper: 50, lead: 25 },
            size: 2,
            powerConsumption: 0.2,
        }) || this;
    }
    return PyratiteMixer;
}(GenericCrafter));
exports.PyratiteMixer = PyratiteMixer;
var BlastMixer = /** @class */ (function (_super) {
    tslib_1.__extends(BlastMixer, _super);
    function BlastMixer() {
        return _super.call(this, {
            name: 'blast-mixer',
            requirements: { lead: 30, titanium: 20 },
            size: 2,
            powerConsumption: 0.4,
        }) || this;
    }
    return BlastMixer;
}(GenericCrafter));
exports.BlastMixer = BlastMixer;
var Melter = /** @class */ (function (_super) {
    tslib_1.__extends(Melter, _super);
    function Melter() {
        var _this = _super.call(this, {
            name: 'melter',
            requirements: { copper: 30, lead: 35, graphite: 45 },
            size: 1,
            powerConsumption: 1.0,
            output: { item: false, liquid: true },
        }) || this;
        _this.output = {
            item: false,
            liquid: true,
        };
        return _this;
    }
    return Melter;
}(GenericCrafter));
exports.Melter = Melter;
var Separator = /** @class */ (function (_super) {
    tslib_1.__extends(Separator, _super);
    function Separator() {
        return _super.call(this, {
            name: 'separator',
            requirements: { copper: 30, titanium: 25 },
            size: 2,
            powerConsumption: 1.0,
        }) || this;
    }
    Separator.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            canvas: canvas,
                            category: category,
                            tile: tile,
                            layers: [this.name, this.name + '-spinner'],
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Separator;
}(GenericCrafter));
exports.Separator = Separator;
var Disassembler = /** @class */ (function (_super) {
    tslib_1.__extends(Disassembler, _super);
    function Disassembler() {
        var _this = _super.call(this) || this;
        _this.name = 'disassembler';
        _this.requirements = {
            graphite: 140,
            titanium: 100,
            silicon: 150,
            'surge-alloy': 70,
        };
        _this.size = 3;
        _this.powerConsumption = 4;
        return _this;
    }
    return Disassembler;
}(Separator));
exports.Disassembler = Disassembler;
var SporePress = /** @class */ (function (_super) {
    tslib_1.__extends(SporePress, _super);
    function SporePress() {
        var _this = _super.call(this, {
            name: 'spore-press',
            requirements: { lead: 35, silicon: 30 },
            size: 2,
            powerConsumption: 0.7,
            output: { item: false, liquid: true },
        }) || this;
        _this.output = {
            item: false,
            liquid: true,
        };
        return _this;
    }
    SporePress.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            canvas: canvas,
                            category: category,
                            tile: tile,
                            layers: [this.name, this.name + '-top'],
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return SporePress;
}(GenericCrafter));
exports.SporePress = SporePress;
var Pulverizer = /** @class */ (function (_super) {
    tslib_1.__extends(Pulverizer, _super);
    function Pulverizer() {
        return _super.call(this, {
            name: 'pulverizer',
            requirements: { copper: 30, lead: 25 },
            size: 1,
            powerConsumption: 0.5,
        }) || this;
    }
    Pulverizer.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            canvas: canvas,
                            category: category,
                            tile: tile,
                            layers: [this.name, this.name + '-rotator'],
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Pulverizer;
}(GenericCrafter));
exports.Pulverizer = Pulverizer;
var CoalCentrifuge = /** @class */ (function (_super) {
    tslib_1.__extends(CoalCentrifuge, _super);
    function CoalCentrifuge() {
        return _super.call(this, {
            name: 'coal-centrifuge',
            requirements: { titanium: 20, graphite: 40, lead: 30 },
            size: 2,
            powerConsumption: 0.7,
        }) || this;
    }
    return CoalCentrifuge;
}(GenericCrafter));
exports.CoalCentrifuge = CoalCentrifuge;
var Incinerator = /** @class */ (function (_super) {
    tslib_1.__extends(Incinerator, _super);
    function Incinerator() {
        var _this = _super.call(this, {
            name: 'incinerator',
            requirements: { graphite: 5, lead: 15 },
            size: 1,
            powerConsumption: 0.5,
            output: { item: false },
        }) || this;
        _this.output = {
            item: false,
            liquid: false,
        };
        return _this;
    }
    return Incinerator;
}(GenericCrafter));
exports.Incinerator = Incinerator;
//# sourceMappingURL=crafting.js.map