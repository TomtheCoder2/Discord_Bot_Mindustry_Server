"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.blocksFolder = exports.Block = void 0;
var tslib_1 = require("tslib");
var util_1 = require("../../util");
var content_1 = require("../content");
var path_1 = tslib_1.__importDefault(require("path"));
var pkg_dir_1 = require("pkg-dir");
/**
 * A generic way to represent a block
 */
var Block = /** @class */ (function (_super) {
    tslib_1.__extends(Block, _super);
    function Block(properties) {
        var _this = _super.call(this, properties.name) || this;
        _this.powerConsumption = 0;
        _this.output = {
            item: false,
            liquid: false,
        };
        Object.assign(_this, properties);
        // converts the consumption in ticks to seconds
        _this.powerConsumption *= 60;
        return _this;
    }
    Block.fromCode = function (code) {
        var block = this.codes.get(code);
        if (block) {
            return block;
        }
        throw new Error('the block is not registered not exist');
    };
    Block.prototype.renderImage = function (_a) {
        var canvas = _a.canvas, image = _a.image, tile = _a.tile;
        var context = canvas.getContext('2d');
        var _b = util_1.translatePos(tile, canvas), x = _b.x, y = _b.y;
        context.drawImage(image, x, y);
    };
    Block.prototype.render = function (_a) {
        var canvas = _a.canvas, category = _a.category, layers = _a.layers, tile = _a.tile;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var layers_1, layers_1_1, layer, image, e_1_1;
            var e_1, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 5, 6, 7]);
                        layers_1 = tslib_1.__values(layers), layers_1_1 = layers_1.next();
                        _c.label = 1;
                    case 1:
                        if (!!layers_1_1.done) return [3 /*break*/, 4];
                        layer = layers_1_1.value;
                        return [4 /*yield*/, util_1.blockAsset(category, layer)];
                    case 2:
                        image = _c.sent();
                        this.renderImage({
                            canvas: canvas,
                            image: image,
                            tile: tile,
                        });
                        _c.label = 3;
                    case 3:
                        layers_1_1 = layers_1.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_1_1 = _c.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (layers_1_1 && !layers_1_1.done && (_b = layers_1.return)) _b.call(layers_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @internal
     */
    Block.codes = new Map();
    return Block;
}(content_1.UnlockableContent));
exports.Block = Block;
exports.blocksFolder = path_1.default.join(pkg_dir_1.sync(__dirname), 'assets/sprites/blocks');
//# sourceMappingURL=block.js.map