"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResupplyPoint = exports.RepairPoint = exports.TetrativeReconstructor = exports.ExponentialReconstructor = exports.MultiplicativeReconstructor = exports.AdditiveReconstructor = exports.NavalFactory = exports.AirFactory = exports.GroundFactory = exports.CommandCenter = void 0;
var tslib_1 = require("tslib");
var util_1 = require("../../util");
var block_1 = require("./block");
var category = 'units';
var degrees = [0, -90, 180, 90];
var Factory = /** @class */ (function (_super) {
    tslib_1.__extends(Factory, _super);
    function Factory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Factory.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var context, _a, x, y, out, offset;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.render({
                            tile: tile,
                            canvas: canvas,
                            category: category,
                            layers: [this.name],
                        })];
                    case 1:
                        _b.sent();
                        context = canvas.getContext('2d');
                        _a = util_1.translatePos(tile, canvas), x = _a.x, y = _a.y;
                        return [4 /*yield*/, util_1.blockAsset(category, 'factory-out-' + this.size)];
                    case 2:
                        out = _b.sent();
                        offset = this.size * 16;
                        context.save();
                        context.translate(x + offset, y + offset);
                        context.rotate((degrees[tile.rotation % 4] * Math.PI) / 180);
                        context.translate(-offset, -offset);
                        context.drawImage(out, 0, 0);
                        context.restore();
                        return [4 /*yield*/, this.render({
                                tile: tile,
                                canvas: canvas,
                                category: category,
                                layers: ['factory-top-' + this.size],
                            })];
                    case 3:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Factory;
}(block_1.Block));
var Reconstructor = /** @class */ (function (_super) {
    tslib_1.__extends(Reconstructor, _super);
    function Reconstructor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Reconstructor.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var context, _a, x, y, input, output, offset, angle;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.render({
                            tile: tile,
                            canvas: canvas,
                            category: category,
                            layers: [this.name],
                        })];
                    case 1:
                        _b.sent();
                        context = canvas.getContext('2d');
                        _a = util_1.translatePos(tile, canvas), x = _a.x, y = _a.y;
                        return [4 /*yield*/, util_1.blockAsset(category, 'factory-in-' + this.size)];
                    case 2:
                        input = _b.sent();
                        return [4 /*yield*/, util_1.blockAsset(category, 'factory-out-' + this.size)];
                    case 3:
                        output = _b.sent();
                        offset = this.size * 16;
                        angle = degrees[tile.rotation % 4];
                        context.save();
                        context.translate(x + offset, y + offset);
                        context.rotate((angle * Math.PI) / 180);
                        context.translate(-offset, -offset);
                        context.drawImage(input, 0, 0);
                        context.drawImage(output, 0, 0);
                        context.restore();
                        return [4 /*yield*/, this.render({
                                tile: tile,
                                canvas: canvas,
                                category: category,
                                layers: [this.name + '-top'],
                            })];
                    case 4:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Reconstructor;
}(block_1.Block));
var CommandCenter = /** @class */ (function (_super) {
    tslib_1.__extends(CommandCenter, _super);
    function CommandCenter() {
        return _super.call(this, {
            name: 'command-center',
            requirements: { copper: 200, lead: 250, silicon: 250, graphite: 100 },
            size: 2,
        }) || this;
    }
    CommandCenter.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            tile: tile,
                            canvas: canvas,
                            category: category,
                            layers: [this.name, this.name + '-team'],
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return CommandCenter;
}(block_1.Block));
exports.CommandCenter = CommandCenter;
var GroundFactory = /** @class */ (function (_super) {
    tslib_1.__extends(GroundFactory, _super);
    function GroundFactory() {
        return _super.call(this, {
            name: 'ground-factory',
            requirements: { copper: 50, lead: 120, silicon: 80 },
            size: 3,
            powerConsumption: 1.2,
        }) || this;
    }
    return GroundFactory;
}(Factory));
exports.GroundFactory = GroundFactory;
var AirFactory = /** @class */ (function (_super) {
    tslib_1.__extends(AirFactory, _super);
    function AirFactory() {
        return _super.call(this, {
            name: 'air-factory',
            requirements: { copper: 60, lead: 70 },
            size: 3,
            powerConsumption: 1.2,
        }) || this;
    }
    return AirFactory;
}(Factory));
exports.AirFactory = AirFactory;
var NavalFactory = /** @class */ (function (_super) {
    tslib_1.__extends(NavalFactory, _super);
    function NavalFactory() {
        return _super.call(this, {
            name: 'naval-factory',
            requirements: { copper: 150, lead: 130, metaglass: 120 },
            size: 3,
            powerConsumption: 1.2,
        }) || this;
    }
    return NavalFactory;
}(Factory));
exports.NavalFactory = NavalFactory;
var AdditiveReconstructor = /** @class */ (function (_super) {
    tslib_1.__extends(AdditiveReconstructor, _super);
    function AdditiveReconstructor() {
        return _super.call(this, {
            name: 'additive-reconstructor',
            requirements: { copper: 200, lead: 120, silicon: 90 },
            size: 3,
            powerConsumption: 3.0,
        }) || this;
    }
    return AdditiveReconstructor;
}(Reconstructor));
exports.AdditiveReconstructor = AdditiveReconstructor;
var MultiplicativeReconstructor = /** @class */ (function (_super) {
    tslib_1.__extends(MultiplicativeReconstructor, _super);
    function MultiplicativeReconstructor() {
        return _super.call(this, {
            name: 'multiplicative-reconstructor',
            requirements: { lead: 650, silicon: 450, titanium: 350, thorium: 650 },
            size: 5,
            powerConsumption: 6.0,
        }) || this;
    }
    return MultiplicativeReconstructor;
}(Reconstructor));
exports.MultiplicativeReconstructor = MultiplicativeReconstructor;
var ExponentialReconstructor = /** @class */ (function (_super) {
    tslib_1.__extends(ExponentialReconstructor, _super);
    function ExponentialReconstructor() {
        return _super.call(this, {
            name: 'exponential-reconstructor',
            requirements: {
                lead: 2000,
                silicon: 1000,
                titanium: 2000,
                thorium: 750,
                plastanium: 450,
                'phase-fabric': 600,
            },
            size: 7,
            powerConsumption: 13.0,
        }) || this;
    }
    return ExponentialReconstructor;
}(Reconstructor));
exports.ExponentialReconstructor = ExponentialReconstructor;
var TetrativeReconstructor = /** @class */ (function (_super) {
    tslib_1.__extends(TetrativeReconstructor, _super);
    function TetrativeReconstructor() {
        return _super.call(this, {
            name: 'tetrative-reconstructor',
            requirements: {
                lead: 4000,
                silicon: 3000,
                thorium: 1000,
                plastanium: 600,
                'phase-fabric': 600,
                'surge-alloy': 800,
            },
            size: 9,
            powerConsumption: 25.0,
        }) || this;
    }
    return TetrativeReconstructor;
}(Reconstructor));
exports.TetrativeReconstructor = TetrativeReconstructor;
var RepairPoint = /** @class */ (function (_super) {
    tslib_1.__extends(RepairPoint, _super);
    function RepairPoint() {
        return _super.call(this, {
            name: 'repair-point',
            requirements: { lead: 15, copper: 15, silicon: 15 },
            size: 1,
        }) || this;
    }
    RepairPoint.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            tile: tile,
                            canvas: canvas,
                            category: category,
                            layers: [this.name + '-base', this.name],
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return RepairPoint;
}(block_1.Block));
exports.RepairPoint = RepairPoint;
var ResupplyPoint = /** @class */ (function (_super) {
    tslib_1.__extends(ResupplyPoint, _super);
    function ResupplyPoint() {
        return _super.call(this, {
            name: 'resupply-point',
            requirements: { lead: 20, copper: 15, silicon: 15 },
            size: 2,
        }) || this;
    }
    ResupplyPoint.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({ tile: tile, canvas: canvas, category: category, layers: [this.name] })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return ResupplyPoint;
}(block_1.Block));
exports.ResupplyPoint = ResupplyPoint;
//# sourceMappingURL=units.js.map