import { Block } from './block';
import { Canvas } from 'canvas';
import { SchematicTile } from '../../schematic';
declare abstract class Factory extends Block {
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
declare abstract class Reconstructor extends Block {
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export declare class CommandCenter extends Block {
    constructor();
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export declare class GroundFactory extends Factory {
    constructor();
}
export declare class AirFactory extends Factory {
    constructor();
}
export declare class NavalFactory extends Factory {
    constructor();
}
export declare class AdditiveReconstructor extends Reconstructor {
    constructor();
}
export declare class MultiplicativeReconstructor extends Reconstructor {
    constructor();
}
export declare class ExponentialReconstructor extends Reconstructor {
    constructor();
}
export declare class TetrativeReconstructor extends Reconstructor {
    constructor();
}
export declare class RepairPoint extends Block {
    constructor();
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export declare class ResupplyPoint extends Block {
    constructor();
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export {};
