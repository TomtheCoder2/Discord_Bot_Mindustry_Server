"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhaseConduit = exports.BridgeConduit = exports.LiquidJunction = exports.LiquidTank = exports.LiquidRouter = exports.PlatedConduit = exports.PulseConduit = exports.Conduit = exports.ThermalPump = exports.RotaryPump = exports.MechanicalPump = void 0;
var tslib_1 = require("tslib");
var block_1 = require("./block");
var category = 'liquid';
var Pump = /** @class */ (function (_super) {
    tslib_1.__extends(Pump, _super);
    function Pump() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.output = {
            item: false,
            liquid: true,
        };
        return _this;
    }
    Pump.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({ tile: tile, canvas: canvas, category: category, layers: [this.name] })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Pump;
}(block_1.Block));
var MechanicalPump = /** @class */ (function (_super) {
    tslib_1.__extends(MechanicalPump, _super);
    function MechanicalPump() {
        return _super.call(this, {
            name: 'mechanical-pump',
            requirements: { copper: 15, metaglass: 10 },
            size: 1,
        }) || this;
    }
    return MechanicalPump;
}(Pump));
exports.MechanicalPump = MechanicalPump;
var RotaryPump = /** @class */ (function (_super) {
    tslib_1.__extends(RotaryPump, _super);
    function RotaryPump() {
        return _super.call(this, {
            name: 'rotary-pump',
            requirements: { copper: 70, metaglass: 50, silicon: 20, titanium: 35 },
            size: 2,
            powerConsumption: 0.3,
        }) || this;
    }
    return RotaryPump;
}(Pump));
exports.RotaryPump = RotaryPump;
var ThermalPump = /** @class */ (function (_super) {
    tslib_1.__extends(ThermalPump, _super);
    function ThermalPump() {
        return _super.call(this, {
            name: 'thermal-pump',
            requirements: {
                copper: 80,
                metaglass: 90,
                silicon: 30,
                titanium: 40,
                thorium: 35,
            },
            size: 3,
            powerConsumption: 1.3,
        }) || this;
    }
    return ThermalPump;
}(Pump));
exports.ThermalPump = ThermalPump;
var Conduit = /** @class */ (function (_super) {
    tslib_1.__extends(Conduit, _super);
    function Conduit() {
        return _super.call(this, {
            name: 'conduit',
            requirements: { metaglass: 1 },
            size: 1,
        }) || this;
    }
    // this block cannot be rendered individually
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    Conduit.prototype.draw = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    return Conduit;
}(block_1.Block));
exports.Conduit = Conduit;
var PulseConduit = /** @class */ (function (_super) {
    tslib_1.__extends(PulseConduit, _super);
    function PulseConduit() {
        var _this = _super.call(this) || this;
        _this.name = "pulse-" + _this.name;
        _this.requirements = { titanium: 2, metaglass: 1 };
        return _this;
    }
    return PulseConduit;
}(Conduit));
exports.PulseConduit = PulseConduit;
var PlatedConduit = /** @class */ (function (_super) {
    tslib_1.__extends(PlatedConduit, _super);
    function PlatedConduit() {
        var _this = _super.call(this) || this;
        _this.name = "plated-" + _this.name;
        _this.requirements = { thorium: 2, metaglass: 1, plastanium: 1 };
        return _this;
    }
    return PlatedConduit;
}(Conduit));
exports.PlatedConduit = PlatedConduit;
var LiquidRouter = /** @class */ (function (_super) {
    tslib_1.__extends(LiquidRouter, _super);
    function LiquidRouter() {
        var _this = _super.call(this, {
            name: 'liquid-router',
            requirements: { graphite: 4, metaglass: 2 },
            size: 1,
        }) || this;
        _this.output = {
            item: false,
            liquid: true,
        };
        return _this;
    }
    LiquidRouter.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            tile: tile,
                            canvas: canvas,
                            category: category,
                            layers: [this.name + '-bottom', this.name + '-top'],
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return LiquidRouter;
}(block_1.Block));
exports.LiquidRouter = LiquidRouter;
var LiquidTank = /** @class */ (function (_super) {
    tslib_1.__extends(LiquidTank, _super);
    function LiquidTank() {
        var _this = _super.call(this) || this;
        _this.name = 'liquid-tank';
        _this.requirements = { titanium: 25, metaglass: 25 };
        _this.size = 3;
        return _this;
    }
    return LiquidTank;
}(LiquidRouter));
exports.LiquidTank = LiquidTank;
var LiquidJunction = /** @class */ (function (_super) {
    tslib_1.__extends(LiquidJunction, _super);
    function LiquidJunction() {
        var _this = _super.call(this, {
            name: 'liquid-junction',
            requirements: { graphite: 2, metaglass: 2 },
            size: 1,
        }) || this;
        _this.output = {
            item: false,
            liquid: true,
        };
        return _this;
    }
    LiquidJunction.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({ tile: tile, canvas: canvas, category: category, layers: [this.name] })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return LiquidJunction;
}(block_1.Block));
exports.LiquidJunction = LiquidJunction;
var BridgeConduit = /** @class */ (function (_super) {
    tslib_1.__extends(BridgeConduit, _super);
    function BridgeConduit() {
        var _this = _super.call(this, {
            name: 'bridge-conduit',
            requirements: { graphite: 4, metaglass: 8 },
            size: 1,
        }) || this;
        _this.output = {
            item: false,
            liquid: true,
        };
        return _this;
    }
    BridgeConduit.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({ tile: tile, canvas: canvas, category: category, layers: [this.name] })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return BridgeConduit;
}(block_1.Block));
exports.BridgeConduit = BridgeConduit;
var PhaseConduit = /** @class */ (function (_super) {
    tslib_1.__extends(PhaseConduit, _super);
    function PhaseConduit() {
        var _this = _super.call(this) || this;
        _this.name = 'phase-conduit';
        _this.requirements = {
            'phase-fabric': 5,
            silicon: 7,
            metaglass: 20,
            titanium: 10,
        };
        _this.powerConsumption = 0.3 * 60;
        return _this;
    }
    return PhaseConduit;
}(BridgeConduit));
exports.PhaseConduit = PhaseConduit;
//# sourceMappingURL=liquid.js.map