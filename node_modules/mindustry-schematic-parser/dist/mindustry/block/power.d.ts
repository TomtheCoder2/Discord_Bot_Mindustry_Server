import { Block, BlockProperties } from './block';
import { Canvas } from 'canvas';
import { SchematicTile } from '../../schematic';
declare abstract class PowerBlock extends Block {
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export declare class PowerNode extends PowerBlock {
    constructor();
}
export declare class PowerNodeLarge extends PowerBlock {
    constructor();
}
export declare class SurgeTower extends PowerBlock {
    constructor();
}
export declare class Diode extends PowerBlock {
    constructor();
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export declare class Battery extends PowerBlock {
    constructor();
}
export declare class BatteryLarge extends PowerBlock {
    constructor();
}
interface PowerGeneratorProperties extends BlockProperties {
    powerGeneration: number;
}
export declare class PowerGenerator extends PowerBlock {
    constructor(properties: PowerGeneratorProperties);
    powerGeneration: number;
}
export declare class CombustionGenerator extends PowerGenerator {
    constructor();
}
export declare class ThermalGenerator extends PowerGenerator {
    constructor();
}
export declare class SteamGenerator extends PowerGenerator {
    constructor();
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export declare class DifferentialGenerator extends PowerGenerator {
    constructor();
}
export declare class RtgGenerator extends PowerGenerator {
    constructor();
}
export declare class SolarPanel extends PowerGenerator {
    constructor();
}
export declare class SolarPanelLarge extends PowerGenerator {
    constructor();
}
export declare class ThoriumReactor extends PowerGenerator {
    constructor();
}
export declare class ImpactReactor extends PowerGenerator {
    constructor();
    draw(tile: SchematicTile, canvas: Canvas): Promise<void>;
}
export {};
