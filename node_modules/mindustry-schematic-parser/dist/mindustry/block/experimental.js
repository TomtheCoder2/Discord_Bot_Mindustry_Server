"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockUnloader = exports.BlockLoader = exports.BlockForge = void 0;
var tslib_1 = require("tslib");
var block_1 = require("./block");
var category = 'experimental';
var ExperimentalBlock = /** @class */ (function (_super) {
    tslib_1.__extends(ExperimentalBlock, _super);
    function ExperimentalBlock() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExperimentalBlock.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({ tile: tile, canvas: canvas, category: category, layers: [this.name] })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return ExperimentalBlock;
}(block_1.Block));
var BlockForge = /** @class */ (function (_super) {
    tslib_1.__extends(BlockForge, _super);
    function BlockForge() {
        return _super.call(this, {
            name: 'block-forge',
            requirements: { thorium: 100 },
            size: 3,
            powerConsumption: 2.0,
        }) || this;
    }
    return BlockForge;
}(ExperimentalBlock));
exports.BlockForge = BlockForge;
var BlockLoader = /** @class */ (function (_super) {
    tslib_1.__extends(BlockLoader, _super);
    function BlockLoader() {
        return _super.call(this, {
            name: 'block-loader',
            requirements: { thorium: 100 },
            size: 3,
            powerConsumption: 2.0,
        }) || this;
    }
    return BlockLoader;
}(ExperimentalBlock));
exports.BlockLoader = BlockLoader;
var BlockUnloader = /** @class */ (function (_super) {
    tslib_1.__extends(BlockUnloader, _super);
    function BlockUnloader() {
        return _super.call(this, {
            name: 'block-unloader',
            requirements: { thorium: 100 },
            size: 3,
            powerConsumption: 2.0,
        }) || this;
    }
    return BlockUnloader;
}(ExperimentalBlock));
exports.BlockUnloader = BlockUnloader;
//# sourceMappingURL=experimental.js.map