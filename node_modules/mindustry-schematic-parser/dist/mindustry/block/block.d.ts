import { Canvas, Image } from 'canvas';
import { ItemCost } from '../item';
import { SchematicTile } from '../../schematic';
import { UnlockableContent } from '../content';
export declare type BlockOutput = {
    item?: boolean;
    liquid?: boolean;
};
export interface BlockProperties {
    name: string;
    requirements: ItemCost;
    size: number;
    powerConsumption?: number;
    output?: BlockOutput;
}
export interface BlockRenderingOptions {
    tile: SchematicTile;
    canvas: Canvas;
    category: string;
    layers: string[];
}
export interface BlockImageRenderingOptions {
    tile: SchematicTile;
    canvas: Canvas;
    image: Image | Canvas;
}
/**
 * A generic way to represent a block
 */
export declare abstract class Block extends UnlockableContent implements BlockProperties {
    constructor(properties: BlockProperties);
    static fromCode(code: string): Block;
    requirements: ItemCost;
    size: number;
    powerConsumption: number;
    output: {
        item: boolean;
        liquid: boolean;
    };
    protected renderImage({ canvas, image, tile, }: BlockImageRenderingOptions): void;
    protected render({ canvas, category, layers, tile, }: BlockRenderingOptions): Promise<void>;
}
export declare const blocksFolder: string;
