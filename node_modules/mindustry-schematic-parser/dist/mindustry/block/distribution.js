"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayloadRouter = exports.PayloadConveyor = exports.MassDriver = exports.UnderflowGate = exports.OverflowGate = exports.Distributor = exports.Router = exports.InvertedSorter = exports.Sorter = exports.PhaseConveyor = exports.ItemBridge = exports.Junction = exports.ArmoredConveyor = exports.PlastaniumConveyor = exports.TitaniumConveyor = exports.Conveyor = void 0;
var tslib_1 = require("tslib");
var canvas_1 = require("canvas");
var util_1 = require("../../util");
var block_1 = require("./block");
var category = 'distribution';
var TransportBlock = /** @class */ (function (_super) {
    tslib_1.__extends(TransportBlock, _super);
    function TransportBlock() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.output = {
            item: true,
            liquid: false,
        };
        return _this;
    }
    TransportBlock.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            tile: tile,
                            canvas: canvas,
                            category: category,
                            layers: [this.name],
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return TransportBlock;
}(block_1.Block));
var Conveyor = /** @class */ (function (_super) {
    tslib_1.__extends(Conveyor, _super);
    function Conveyor() {
        var _this = _super.call(this, {
            name: 'conveyor',
            requirements: { copper: 1 },
            size: 1,
        }) || this;
        _this.output = {
            item: false,
            liquid: false,
        };
        return _this;
    }
    // the rendering of this block cannot be done individually
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    Conveyor.prototype.draw = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    return Conveyor;
}(TransportBlock));
exports.Conveyor = Conveyor;
var TitaniumConveyor = /** @class */ (function (_super) {
    tslib_1.__extends(TitaniumConveyor, _super);
    function TitaniumConveyor() {
        var _this = _super.call(this) || this;
        _this.name = "titanium-" + _this.name;
        _this.requirements = { copper: 1, lead: 1, titanium: 1 };
        return _this;
    }
    return TitaniumConveyor;
}(Conveyor));
exports.TitaniumConveyor = TitaniumConveyor;
var PlastaniumConveyor = /** @class */ (function (_super) {
    tslib_1.__extends(PlastaniumConveyor, _super);
    function PlastaniumConveyor() {
        var _this = _super.call(this, {
            name: 'plastanium-conveyor',
            requirements: { plastanium: 1, silicon: 1, graphite: 1 },
            size: 1,
        }) || this;
        _this.output = {
            item: false,
            liquid: false,
        };
        return _this;
    }
    // the rendering of this block cannot be done individually
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    PlastaniumConveyor.prototype.draw = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    return PlastaniumConveyor;
}(TransportBlock));
exports.PlastaniumConveyor = PlastaniumConveyor;
var ArmoredConveyor = /** @class */ (function (_super) {
    tslib_1.__extends(ArmoredConveyor, _super);
    function ArmoredConveyor() {
        var _this = _super.call(this) || this;
        _this.name = "armored-" + _this.name;
        _this.requirements = { plastanium: 1, thorium: 1, metaglass: 1 };
        return _this;
    }
    return ArmoredConveyor;
}(Conveyor));
exports.ArmoredConveyor = ArmoredConveyor;
var Junction = /** @class */ (function (_super) {
    tslib_1.__extends(Junction, _super);
    function Junction() {
        return _super.call(this, {
            name: 'junction',
            requirements: { copper: 2 },
            size: 1,
        }) || this;
    }
    return Junction;
}(TransportBlock));
exports.Junction = Junction;
var ItemBridge = /** @class */ (function (_super) {
    tslib_1.__extends(ItemBridge, _super);
    function ItemBridge() {
        return _super.call(this, {
            name: 'bridge-conveyor',
            requirements: { lead: 6, copper: 6 },
            size: 1,
        }) || this;
    }
    return ItemBridge;
}(TransportBlock));
exports.ItemBridge = ItemBridge;
var PhaseConveyor = /** @class */ (function (_super) {
    tslib_1.__extends(PhaseConveyor, _super);
    function PhaseConveyor() {
        var _this = _super.call(this) || this;
        _this.name = 'phase-conveyor';
        _this.requirements = {
            'phase-fabric': 5,
            silicon: 7,
            lead: 10,
            graphite: 10,
        };
        _this.powerConsumption = 0.3 * 60;
        return _this;
    }
    return PhaseConveyor;
}(ItemBridge));
exports.PhaseConveyor = PhaseConveyor;
var Sorter = /** @class */ (function (_super) {
    tslib_1.__extends(Sorter, _super);
    function Sorter() {
        return _super.call(this, {
            name: 'sorter',
            requirements: { lead: 2, copper: 2 },
            size: 1,
        }) || this;
    }
    Sorter.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var config, imgName, image;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({ tile: tile, canvas: canvas, category: category, layers: [this.name] })];
                    case 1:
                        _a.sent();
                        config = tile.config;
                        imgName = config ? 'center' : 'cross';
                        return [4 /*yield*/, util_1.blockAsset(category, imgName)];
                    case 2:
                        image = _a.sent();
                        this.renderImage({
                            canvas: canvas,
                            tile: tile,
                            image: config ? util_1.tintImage(image, config.color, 1) : image,
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return Sorter;
}(TransportBlock));
exports.Sorter = Sorter;
var InvertedSorter = /** @class */ (function (_super) {
    tslib_1.__extends(InvertedSorter, _super);
    function InvertedSorter() {
        var _this = _super.call(this) || this;
        _this.name = "inverted-" + _this.name;
        return _this;
    }
    return InvertedSorter;
}(Sorter));
exports.InvertedSorter = InvertedSorter;
var Router = /** @class */ (function (_super) {
    tslib_1.__extends(Router, _super);
    function Router() {
        return _super.call(this, {
            name: 'router',
            requirements: { copper: 3 },
            size: 1,
        }) || this;
    }
    return Router;
}(TransportBlock));
exports.Router = Router;
var Distributor = /** @class */ (function (_super) {
    tslib_1.__extends(Distributor, _super);
    function Distributor() {
        return _super.call(this, {
            name: 'distributor',
            requirements: { lead: 4, copper: 4 },
            size: 2,
        }) || this;
    }
    return Distributor;
}(TransportBlock));
exports.Distributor = Distributor;
var OverflowGate = /** @class */ (function (_super) {
    tslib_1.__extends(OverflowGate, _super);
    function OverflowGate() {
        return _super.call(this, {
            name: 'overflow-gate',
            requirements: { lead: 2, copper: 4 },
            size: 1,
        }) || this;
    }
    return OverflowGate;
}(TransportBlock));
exports.OverflowGate = OverflowGate;
var UnderflowGate = /** @class */ (function (_super) {
    tslib_1.__extends(UnderflowGate, _super);
    function UnderflowGate() {
        return _super.call(this, {
            name: 'underflow-gate',
            requirements: { lead: 2, copper: 4 },
            size: 1,
        }) || this;
    }
    return UnderflowGate;
}(TransportBlock));
exports.UnderflowGate = UnderflowGate;
var MassDriver = /** @class */ (function (_super) {
    tslib_1.__extends(MassDriver, _super);
    function MassDriver() {
        return _super.call(this, {
            name: 'mass-driver',
            requirements: { titanium: 125, silicon: 75, lead: 125, thorium: 50 },
            size: 3,
            powerConsumption: 1.75,
        }) || this;
    }
    MassDriver.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tcanvas, context, image, dArr, s, x, y, i;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            canvas: canvas,
                            category: category,
                            tile: tile,
                            layers: [this.name + '-base'],
                        })];
                    case 1:
                        _a.sent();
                        tcanvas = canvas_1.createCanvas(this.size * 32, this.size * 32);
                        context = tcanvas.getContext('2d');
                        return [4 /*yield*/, util_1.blockAsset(category, this.name)];
                    case 2:
                        image = _a.sent();
                        dArr = [-1, -1, 0, -1, 1, -1, -1, 0, 1, 0, -1, 1, 0, 1, 1, 1], s = 3, x = 0, y = 0;
                        i = 0;
                        // draw images at offsets from the array scaled by s
                        for (; i < dArr.length; i += 2)
                            context.drawImage(image, x + dArr[i] * s, y + dArr[i + 1] * s);
                        // fill with color
                        context.globalCompositeOperation = 'source-in';
                        context.fillStyle = '#353535';
                        context.fillRect(0, 0, tcanvas.width, tcanvas.height);
                        // draw original image in normal mode
                        context.globalCompositeOperation = 'source-over';
                        context.drawImage(image, x, y);
                        this.renderImage({
                            canvas: canvas,
                            image: tcanvas,
                            tile: tile,
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return MassDriver;
}(TransportBlock));
exports.MassDriver = MassDriver;
var PayloadConveyor = /** @class */ (function (_super) {
    tslib_1.__extends(PayloadConveyor, _super);
    function PayloadConveyor() {
        return _super.call(this, {
            name: 'payload-conveyor',
            requirements: { graphite: 10, copper: 20 },
            size: 3,
        }) || this;
    }
    PayloadConveyor.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var size, image, tcanvas, context, rotation;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        size = this.size * 32;
                        return [4 /*yield*/, util_1.blockAsset(category, this.name + '-icon')];
                    case 1:
                        image = _a.sent();
                        tcanvas = canvas_1.createCanvas(size, size);
                        context = tcanvas.getContext('2d');
                        rotation = tile.rotation;
                        if (rotation % 2) {
                            rotation += 2;
                        }
                        context.save();
                        context.translate(size / 2, size / 2);
                        context.rotate((rotation * Math.PI) / 2);
                        context.drawImage(image, -size / 2, -size / 2);
                        context.restore();
                        this.renderImage({
                            canvas: canvas,
                            tile: tile,
                            image: tcanvas,
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return PayloadConveyor;
}(TransportBlock));
exports.PayloadConveyor = PayloadConveyor;
var PayloadRouter = /** @class */ (function (_super) {
    tslib_1.__extends(PayloadRouter, _super);
    function PayloadRouter() {
        return _super.call(this, {
            name: 'payload-router',
            requirements: { graphite: 15, copper: 20 },
            size: 3,
        }) || this;
    }
    PayloadRouter.prototype.draw = function (tile, canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var size, image, tcanvas, context, rotation;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.render({
                            tile: tile,
                            canvas: canvas,
                            category: category,
                            layers: [this.name, this.name + '-over'],
                        })];
                    case 1:
                        _a.sent();
                        size = this.size * 32;
                        return [4 /*yield*/, util_1.blockAsset(category, this.name + '-top')];
                    case 2:
                        image = _a.sent();
                        tcanvas = canvas_1.createCanvas(size, size);
                        context = tcanvas.getContext('2d');
                        rotation = tile.rotation;
                        if (rotation % 2) {
                            rotation += 2;
                        }
                        context.save();
                        context.translate(size / 2, size / 2);
                        context.rotate((rotation * Math.PI) / 2);
                        context.drawImage(image, -size / 2, -size / 2);
                        context.restore();
                        this.renderImage({
                            canvas: canvas,
                            tile: tile,
                            image: tcanvas,
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return PayloadRouter;
}(TransportBlock));
exports.PayloadRouter = PayloadRouter;
//# sourceMappingURL=distribution.js.map