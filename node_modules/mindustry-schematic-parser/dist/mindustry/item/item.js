"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Item = void 0;
var itemColors = {
    copper: '#d99d73',
    lead: '#8c7fa9',
    metaglass: '#ebeef5',
    graphite: '#b2c6d2',
    sand: '#f7cba4',
    coal: '#272727',
    titanium: '#8da1e3',
    thorium: '#f9a3c7',
    scrap: '#777777',
    silicon: '#53565c',
    plastanium: '#cbd97f',
    'phase-fabric': '#f4ba6e',
    'surge-alloy': '#f3e979',
    'spore-pod': '#7457ce',
    'blast-compound': '#ff795e',
    pyratite: '#ffaa5f',
};
/** A wrapper for `ItemCode`, can be useful with `instanceof` */
var Item = /** @class */ (function () {
    function Item(code) {
        this.code = code;
        this.color = itemColors[code];
    }
    Item.create = function (name) {
        var item = this.itemMap.get(name);
        if (!item) {
            item = new Item(name);
            this.itemMap.set(name, item);
        }
        return item;
    };
    Item.fromCode = function (code) {
        var _a;
        var items = [
            'copper',
            'lead',
            'metaglass',
            'graphite',
            'sand',
            'coal',
            'titanium',
            'thorium',
            'scrap',
            'silicon',
            'plastanium',
            'phase-fabric',
            'surge-alloy',
            'spore-pod',
            'blast-compound',
            'pyratite',
        ];
        if (code > items.length - 1)
            throw new Error('Unknown item code: ' + code);
        var name = items[code];
        var item = (_a = this.itemMap.get(name)) !== null && _a !== void 0 ? _a : this.create(name);
        return item;
    };
    Item.itemMap = new Map();
    return Item;
}());
exports.Item = Item;
//# sourceMappingURL=item.js.map