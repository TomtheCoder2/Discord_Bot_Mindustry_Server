"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Point2 = void 0;
var tslib_1 = require("tslib");
/**
 * A point in a 2D grid, with integer x and y coordinates
 * @author badlogic
 *
 * Copied from `Anuken/Arc`
 */
var Point2 = /** @class */ (function () {
    /**
     * Constructs a new 2D grid point.
     * @param x X coordinate
     * @param y Y coordinate
     */
    function Point2(x, y) {
        this.x = x;
        this.y = y;
    }
    /** @return a point unpacked from an integer. */
    Point2.unpack = function (pos) {
        return new Point2(pos >>> 16, pos & 0xffff);
    };
    /** @return this point packed into a single int by casting its components to shorts. */
    Point2.pack = function (x, y) {
        return (x << 16) | (y & 0xffff);
    };
    /** @return the x component of a packed position. */
    Point2.x = function (pos) {
        return pos >>> 16;
    };
    /** @return the y component of a packed position. */
    Point2.y = function (pos) {
        return pos & 0xffff;
    };
    /** @return this point packed into a single int by casting its components to shorts. */
    Point2.prototype.pack = function () {
        return Point2.pack(this.x, this.y);
    };
    Point2.prototype.set = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args[0] instanceof Point2) {
            var _a = tslib_1.__read(args, 1), point = _a[0];
            this.x = point.x;
            this.y = point.y;
            return this;
        }
        var _b = tslib_1.__read(args, 2), x = _b[0], y = _b[1];
        this.x = x;
        this.y = y;
        return this;
    };
    Point2.prototype.dst2 = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args[0] instanceof Point2) {
            var _a = tslib_1.__read(args, 1), other = _a[0];
            var xd_1 = other.x - this.x;
            var yd_1 = other.y - this.y;
            return xd_1 * xd_1 + yd_1 * yd_1;
        }
        var _b = tslib_1.__read(args, 2), x = _b[0], y = _b[1];
        var xd = x - this.x;
        var yd = y - this.y;
        return xd * xd + yd * yd;
    };
    Point2.prototype.dst = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args[0] instanceof Point2) {
            var _a = tslib_1.__read(args, 1), other = _a[0];
            var xd_2 = other.x - this.x;
            var yd_2 = other.y - this.y;
            return Math.sqrt(xd_2 * xd_2 + yd_2 * yd_2);
        }
        var _b = tslib_1.__read(args, 2), x = _b[0], y = _b[1];
        var xd = x - this.x;
        var yd = y - this.y;
        return Math.sqrt(xd * xd + yd * yd);
    };
    Point2.prototype.add = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args[0] instanceof Point2) {
            var _a = tslib_1.__read(args, 1), other = _a[0];
            this.x += other.x;
            this.y += other.y;
            return this;
        }
        var _b = tslib_1.__read(args, 2), x = _b[0], y = _b[1];
        this.x += x;
        this.y += y;
        return this;
    };
    Point2.prototype.sub = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args[0] instanceof Point2) {
            var _a = tslib_1.__read(args, 1), other = _a[0];
            this.x -= other.x;
            this.y -= other.y;
            return this;
        }
        var _b = tslib_1.__read(args, 2), x = _b[0], y = _b[1];
        this.x -= x;
        this.y -= y;
        return this;
    };
    /**
     * @return a copy of this grid point
     */
    Point2.prototype.cpy = function () {
        return new Point2(this.x, this.y);
    };
    /** Rotates this point in 90-degree increments several times. */
    Point2.prototype.rotate = function (steps) {
        for (var i = 0; i < Math.abs(steps); i++) {
            var x = this.x;
            if (steps >= 0) {
                this.x = -this.y;
                this.y = x;
            }
            else {
                this.x = this.y;
                this.y = -x;
            }
        }
        return this;
    };
    Point2.equals = function (x, y, ox, oy) {
        return x === ox && y === oy;
    };
    Point2.prototype.equals = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        {
            if (args[0] instanceof Point2) {
                var _a = tslib_1.__read(args, 1), other = _a[0];
                return this.x === other.x && this.y === other.y;
            }
            var _b = tslib_1.__read(args, 2), x = _b[0], y = _b[1];
            return this.x === x && this.y === y;
        }
    };
    Point2.prototype.hashCode = function () {
        return this.x * 0xc13f + this.y * 0x91e1;
    };
    Point2.prototype.toString = function () {
        return '(' + this.x + ', ' + this.y + ')';
    };
    return Point2;
}());
exports.Point2 = Point2;
//# sourceMappingURL=point2.js.map