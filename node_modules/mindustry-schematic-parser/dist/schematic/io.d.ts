/// <reference types="node" />
import { Schematic } from './schematic';
export declare abstract class SchematicIO {
    static readonly header = "msch";
    static readonly version = 1;
    private static isValid;
    private static compressedData;
    private static tags;
    private static blocks;
    private static mapConfig;
    private static readConfigObject;
    private static tiles;
    private static schematicSize;
    /**
     * Parses the data and returns a schematic
     *  @param encoded The encoded schematic data
     */
    static decode(encoded: string | Buffer): Schematic;
    /** Takes a decoded schematic and saves its new tags
     * @param schematic A decoded schematic in wich the tags were modified
     */
    static encodeTags(schematic: Schematic): string;
}
/**
 * A simple way to decode schematics
 * @deprecated The use of this class is deprecated, use `Schematic.decode` instead
 */
export declare class SchematicDecoder extends SchematicIO {
    readonly value: string;
    private readonly data;
    /** The parsed schematic, will be `undefined` until parsing is complete */
    private schematic?;
    constructor(value: string);
    /**
     * Parses the text and returns a schematic
     *
     * If called multiple times, the same `Schematic` instance will be returned
     *
     * @deprecated This class is deprecated use `Schematic.decode` instead
     */
    decode(): Schematic;
    /**
     * @deprecated The use of this method is deprecated, use `Schematic.encode` instead
     */
    encodeWithTags(schematic: Schematic): string;
}
