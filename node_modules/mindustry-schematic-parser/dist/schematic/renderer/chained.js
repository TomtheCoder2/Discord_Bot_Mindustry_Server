"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.drawChained = void 0;
var tslib_1 = require("tslib");
var util_1 = require("../../util");
var rotation_1 = require("./rotation");
var mindustry_1 = require("../../mindustry");
var _a = mindustry_1.Blocks.distribution, ArmoredConveyor = _a.ArmoredConveyor, Conveyor = _a.Conveyor, PlastaniumConveyor = _a.PlastaniumConveyor, _b = mindustry_1.Blocks.liquid, Conduit = _b.Conduit, PlatedConduit = _b.PlatedConduit;
function getConnections(tile, mappedTiles, mode) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    var blockType = {
        conveyor: Conveyor,
        'armored-conveyor': Conveyor,
        conduit: Conduit,
        'plated-conduit': Conduit,
        'plastanium-conveyor': PlastaniumConveyor,
    }[mode];
    var result = {
        top: false,
        bottom: false,
        left: false,
        right: false,
    };
    var x = tile.x, y = tile.y;
    var size = tile.block.size;
    var tiles = {
        top: (_a = mappedTiles[x]) === null || _a === void 0 ? void 0 : _a[y + size],
        bottom: (_b = mappedTiles[x]) === null || _b === void 0 ? void 0 : _b[y - size],
        left: (_c = mappedTiles[x - size]) === null || _c === void 0 ? void 0 : _c[y],
        right: (_d = mappedTiles[x + size]) === null || _d === void 0 ? void 0 : _d[y],
    };
    switch (mode) {
        case 'conveyor':
        case 'conduit':
            {
                var rotation = tile.rotation;
                var mappedTile = (_e = mappedTiles[x]) === null || _e === void 0 ? void 0 : _e[y];
                var key = rotation_1.BlockRotation[rotation];
                result[key] || (result[key] = (mappedTile === null || mappedTile === void 0 ? void 0 : mappedTile.block) instanceof PlastaniumConveyor);
                var content = mode === 'conveyor' ? 'item' : 'liquid';
                var _loop_1 = function (k) {
                    var x_1 = tile.x, y_1 = tile.y;
                    var moves = [function () { return x_1++; }, function () { return y_1++; }, function () { return x_1--; }, function () { return y_1--; }];
                    moves[rotation]();
                    var target = (_f = mappedTiles[x_1]) === null || _f === void 0 ? void 0 : _f[y_1];
                    var key_1 = k;
                    var t = tiles[key_1];
                    result[key_1] || (result[key_1] = (_g = (((t === null || t === void 0 ? void 0 : t.block) instanceof blockType &&
                        (t === null || t === void 0 ? void 0 : t.rotation) === (rotation_1.BlockRotation[key_1] + 2) % 4) ||
                        ((t === null || t === void 0 ? void 0 : t.block.output[content]) && t !== target))) !== null && _g !== void 0 ? _g : false);
                };
                for (var k in tiles) {
                    _loop_1(k);
                }
            }
            break;
        case 'armored-conveyor':
        case 'plated-conduit':
        case 'plastanium-conveyor':
            for (var k in tiles) {
                var key = k;
                var tile_1 = tiles[key];
                result[key] || (result[key] = (tile_1 === null || tile_1 === void 0 ? void 0 : tile_1.block) instanceof blockType &&
                    (tile_1 === null || tile_1 === void 0 ? void 0 : tile_1.rotation) === (rotation_1.BlockRotation[key] + 2) % 4);
            }
            break;
    }
    if (mode === 'plastanium-conveyor') {
        var rotation = tile.rotation;
        var x_2 = tile.x, y_2 = tile.y;
        switch (rotation) {
            case 0:
                x_2++;
                break;
            case 1:
                y_2++;
                break;
            case 2:
                x_2--;
                break;
            case 3:
                y_2--;
                break;
        }
        var mappedTile = (_h = mappedTiles[x_2]) === null || _h === void 0 ? void 0 : _h[y_2];
        var key = rotation_1.BlockRotation[rotation];
        result[key] || (result[key] = (mappedTile === null || mappedTile === void 0 ? void 0 : mappedTile.block) instanceof PlastaniumConveyor);
    }
    return result;
}
function drawChained(schematic, canvas, mappedTiles, options) {
    var _a, _b, _c, _d, _e, _f, _g;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var context, degrees, allowed, _h, _j, tile, block, _k, x, y, base, edge, connections, k, key, mode, category, connections, rotation, right, top_1, left, bottom, scaleX, scaleY, c, activeConnections, k, key, imgIndex, prefix, suffix, image, e_1_1;
        var e_1, _l;
        return tslib_1.__generator(this, function (_m) {
            switch (_m.label) {
                case 0:
                    context = canvas.getContext('2d');
                    degrees = [0, -90, 180, 90];
                    allowed = {
                        conveyor: (_a = options.conveyors) === null || _a === void 0 ? void 0 : _a.render,
                        'titanium-conveyor': (_b = options.conveyors) === null || _b === void 0 ? void 0 : _b.render,
                        'plastanium-conveyor': (_c = options.conveyors) === null || _c === void 0 ? void 0 : _c.render,
                        'armored-conveyor': (_d = options.conveyors) === null || _d === void 0 ? void 0 : _d.render,
                        conduit: (_e = options.conduits) === null || _e === void 0 ? void 0 : _e.render,
                        'pulse-conduit': (_f = options.conduits) === null || _f === void 0 ? void 0 : _f.render,
                        'plated-conduit': (_g = options.conduits) === null || _g === void 0 ? void 0 : _g.render,
                    };
                    _m.label = 1;
                case 1:
                    _m.trys.push([1, 9, 10, 11]);
                    _h = tslib_1.__values(schematic.tiles), _j = _h.next();
                    _m.label = 2;
                case 2:
                    if (!!_j.done) return [3 /*break*/, 8];
                    tile = _j.value;
                    block = tile.block;
                    _k = util_1.translatePos(tile, canvas), x = _k.x, y = _k.y;
                    if (!(block.name in allowed && allowed[block.name]))
                        return [3 /*break*/, 7];
                    if (!(block instanceof PlastaniumConveyor)) return [3 /*break*/, 5];
                    return [4 /*yield*/, util_1.blockAsset('distribution/conveyors', block.name + '-0')];
                case 3:
                    base = _m.sent();
                    return [4 /*yield*/, util_1.blockAsset('distribution/conveyors', block.name + '-edge')];
                case 4:
                    edge = _m.sent();
                    connections = getConnections(tile, mappedTiles, 'plastanium-conveyor');
                    context.save();
                    context.translate(x + 16, y + 16);
                    context.rotate((degrees[tile.rotation % 4] * Math.PI) / 180);
                    context.translate(-16, -16);
                    context.drawImage(base, 0, 0);
                    context.restore();
                    for (k in connections) {
                        key = k;
                        if (connections[key])
                            continue;
                        context.save();
                        context.translate(x + 16, y + 16);
                        context.rotate((degrees[rotation_1.BlockRotation[key] % 4] * Math.PI) / 180);
                        context.translate(-16, -16);
                        context.drawImage(edge, 0, 0);
                        context.restore();
                    }
                    return [3 /*break*/, 7];
                case 5:
                    if (!(block instanceof Conveyor || block instanceof Conduit)) return [3 /*break*/, 7];
                    mode = void 0;
                    if (block instanceof ArmoredConveyor) {
                        mode = 'armored-conveyor';
                    }
                    else if (block instanceof Conveyor) {
                        mode = 'conveyor';
                    }
                    else if (block instanceof PlatedConduit) {
                        mode = 'plated-conduit';
                    }
                    else {
                        mode = 'conduit';
                    }
                    category = block instanceof Conveyor ? 'distribution/conveyors' : 'liquid';
                    connections = getConnections(tile, mappedTiles, mode);
                    rotation = tile.rotation;
                    right = rotation_1.BlockRotation[rotation % 4];
                    top_1 = rotation_1.BlockRotation[(rotation + 1) % 4];
                    left = rotation_1.BlockRotation[(rotation + 2) % 4];
                    bottom = rotation_1.BlockRotation[(rotation + 3) % 4];
                    scaleX = 1, scaleY = 1;
                    c = connections;
                    activeConnections = 0;
                    for (k in connections) {
                        key = k;
                        if (rotation === rotation_1.BlockRotation[key])
                            continue;
                        if (connections[key])
                            activeConnections++;
                    }
                    imgIndex = 0;
                    switch (activeConnections) {
                        case 1:
                            if (c[top_1]) {
                                imgIndex = 1;
                            }
                            else if (c[bottom]) {
                                if (rotation === rotation_1.BlockRotation.bottom ||
                                    rotation === rotation_1.BlockRotation.top)
                                    scaleX = -1;
                                else if (rotation === rotation_1.BlockRotation.left ||
                                    rotation === rotation_1.BlockRotation.right)
                                    scaleY = -1;
                                imgIndex = 1;
                            }
                            break;
                        case 2:
                            if (c[top_1] && c[bottom]) {
                                imgIndex = 4;
                            }
                            else if (c[left] && c[bottom]) {
                                imgIndex = 2;
                            }
                            else if (c[left] && c[top_1]) {
                                imgIndex = 2;
                                if (rotation === rotation_1.BlockRotation.bottom ||
                                    rotation === rotation_1.BlockRotation.top)
                                    scaleX = -1;
                                else if (rotation === rotation_1.BlockRotation.right ||
                                    rotation === rotation_1.BlockRotation.left)
                                    scaleY = -1;
                            }
                            else if (c[right] && c[bottom]) {
                                imgIndex = 2;
                            }
                            else if (c[right] && c[top_1]) {
                                imgIndex = 2;
                            }
                            break;
                        case 3:
                            imgIndex = 3;
                            break;
                    }
                    prefix = block instanceof Conveyor ? '-' : '-top-';
                    suffix = block instanceof Conveyor ? '-0' : '';
                    return [4 /*yield*/, util_1.blockAsset(category, "" + block.name + prefix + imgIndex + suffix)];
                case 6:
                    image = _m.sent();
                    context.save();
                    context.translate(x + 16, y + 16);
                    context.scale(scaleX, scaleY);
                    context.rotate((degrees[tile.rotation % 4] * Math.PI) / 180);
                    context.translate(-16, -16);
                    context.drawImage(image, 0, 0);
                    context.restore();
                    _m.label = 7;
                case 7:
                    _j = _h.next();
                    return [3 /*break*/, 2];
                case 8: return [3 /*break*/, 11];
                case 9:
                    e_1_1 = _m.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 11];
                case 10:
                    try {
                        if (_j && !_j.done && (_l = _h.return)) _l.call(_h);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 11: return [2 /*return*/];
            }
        });
    });
}
exports.drawChained = drawChained;
//# sourceMappingURL=chained.js.map